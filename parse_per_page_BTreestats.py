import os, sys
import numpy as np

def get_workload_results(fname):
	with open(fname, 'r') as sf:
		sfl = sf.readlines()[1:]
		ct_pages_touched = 0

		num_allocs_per_page = []
		sum_allocs_per_page = []
		avg_alloc_sz_per_page = []
		num_pgs_with_one_alloc = 0

		ct_pages_with_tagArr = 0
		total_mem_tagArr = 0
		total_mem_btree = 0

		for l in sfl:
			lsp = l.split(', ')
			if (int(lsp[1]) == 1): # PageTouched
				ct_pages_touched += 1
				num_allocs_per_page.append(int(lsp[2]))
				sum_allocs_per_page.append(int(lsp[3])*16) # Allocated mem In Bytes
				avg_alloc_sz_per_page.append(sum_allocs_per_page[-1]/float(num_allocs_per_page[-1]))

				total_mem_tagArr += 128
				total_mem_btree += int(lsp[7])

				if (int(lsp[7]) == 128):
					ct_pages_with_tagArr += 1

				if (int(lsp[2]) == 1):
					num_pgs_with_one_alloc += 1

		num_allocs_per_page = np.array(num_allocs_per_page)
		sum_allocs_per_page = np.array(sum_allocs_per_page)

		# Allocation STATS:
		print("MEAN #Allocs per page: %f, Median: %f"%(np.mean(num_allocs_per_page), np.percentile(num_allocs_per_page, 50)), " MEAN,Med,Min,Max Avg Alloc Size per page: ", np.mean(avg_alloc_sz_per_page), np.median(avg_alloc_sz_per_page), min(avg_alloc_sz_per_page), max(avg_alloc_sz_per_page) )

		# BTree STATS:
		print("#Pages touched: ", ct_pages_touched, "#Pgs with 1 alloc: %i, TagArr: %i, BTree: %i TOTAL Mem savings: %f, #Pgs with TagArr: %i"%(num_pgs_with_one_alloc, total_mem_tagArr, total_mem_btree, total_mem_tagArr/float(total_mem_btree), ct_pages_with_tagArr ) )
		return num_allocs_per_page, sum_allocs_per_page, avg_alloc_sz_per_page, num_pgs_with_one_alloc, ct_pages_with_tagArr, total_mem_btree, total_mem_tagArr

workloads = ['apache2', 'axel', 'md5', 'ffmpeg', 'pbzip2']
workload_ids = { workloads[i]:i for i in range(len(workloads))}

workloads_page_prop_tag_arr = {'Tag Array': [1 for x in workloads], '4-bit BTree': [1 for x in workloads], '8-bit BTree': [1 for x in workloads], '16-bit BTree': [1 for x in workloads]}

for workload in workloads:
	for taglen in [4, 8, 16]:
		for f in os.listdir(sys.argv[1]):
			if workload in f and "%ib_FBitArrNew_Opt"%(taglen) in f and ".csv" in f:
				na, sa, avg, n1, ct_tag, btree, arr = get_workload_results(f)
				workloads_page_prop_tag_arr['%i-bit BTree'%(taglen)][ workload_ids[workload] ] = float(ct_tag)/len(na)
				print("For ", workload, taglen, len(na), avg, n1, ct_tag, btree, arr, " Metric: ", float(ct_tag)/len(na), workloads_page_prop_tag_arr)

# Plot:
# y-axis: proportion of pgs using 4-bit tag arr
# x-axis: 5 workloads, 4bars for each: TagArr, 4bitBT, 8bitBT, 16bitBT

