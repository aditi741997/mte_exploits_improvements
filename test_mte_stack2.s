	.text
	.file	"test_mte_stack2.cpp"
	.globl	_Z5test2Pii                     // -- Begin function _Z5test2Pii
	.p2align	2
	.type	_Z5test2Pii,@function
_Z5test2Pii:                            // @_Z5test2Pii
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x8, xzr
	irg	x8, sp, x8
	addg	x9, x8, #80, #0
	stg	x9, [x9]
	addg	x10, x8, #64, #1
	stg	x10, [x10]
	addg	x8, x8, #48, #2
	stg	x8, [x8]
	str	x0, [x9]
	str	w1, [x10]
	ldr	x11, [x9]
	ldr	w2, [x11]
	ldr	w4, [x10]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	x1, x11
	mov	x3, x9
	mov	x5, x10
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	bl	printf
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	mov	w12, #-101
	str	w12, [x9]
	ldr	x9, [x8]
	mov	x10, #-72057594037927936
	add	x9, x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	str	x9, [x10]
	ldr	x1, [x10]
	adrp	x9, .L.str.1
	add	x9, x9, :lo12:.L.str.1
	str	w0, [sp, #20]                   // 4-byte Folded Spill
	mov	x0, x9
	bl	printf
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	ldr	w1, [x9, #8]
	adrp	x9, .L.str.2
	add	x9, x9, :lo12:.L.str.2
	str	w0, [sp, #16]                   // 4-byte Folded Spill
	mov	x0, x9
	bl	printf
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	ldr	w1, [x9, #8]
	adrp	x9, .L.str.3
	add	x9, x9, :lo12:.L.str.3
	str	w0, [sp, #12]                   // 4-byte Folded Spill
	mov	x0, x9
	bl	printf
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	ldrsw	x11, [x10]
	add	x9, x9, x11, lsl #2
	ldr	w2, [x9]
	adrp	x11, .L.str.4
	add	x11, x11, :lo12:.L.str.4
	str	w0, [sp, #8]                    // 4-byte Folded Spill
	mov	x0, x11
	mov	x1, x9
	bl	printf
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	ldrsw	x11, [x10]
	add	x9, x9, x11, lsl #2
	ldr	w2, [x9]
	adrp	x11, .L.str.5
	add	x11, x11, :lo12:.L.str.5
	str	w0, [sp, #4]                    // 4-byte Folded Spill
	mov	x0, x11
	mov	x1, x9
	bl	printf
	st2g	sp, [sp, #48]
	stg	sp, [sp, #80]
	add	sp, sp, #96                     // =96
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end0:
	.size	_Z5test2Pii, .Lfunc_end0-_Z5test2Pii
	.cfi_endproc
                                        // -- End function
	.globl	_Z4testi                        // -- Begin function _Z4testi
	.p2align	2
	.type	_Z4testi,@function
_Z4testi:                               // @_Z4testi
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208                    // =208
	stp	x29, x30, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #192                   // =192
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x8, xzr
	irg	x8, sp, x8
	addg	x9, x8, #176, #0
	stg	x9, [x9]
	mov	x10, x9
	addg	x11, x8, #160, #1
	mov	x12, x11
	stg	x11, [x11]
	addg	x13, x8, #112, #2
	mov	x14, x13
	stg	x13, [x13, #32]
	st2g	x13, [x13]
	addg	x15, x8, #96, #3
	stg	x15, [x15]
	mov	x16, x15
	addg	x17, x8, #80, #4
	stg	x17, [x17]
	mov	x18, x17
	addg	x8, x8, #64, #5
	stg	x8, [x8]
	str	w0, [x9]
	mov	w0, #101
	str	w0, [x15]
	ldr	w1, [x9]
	ldr	w6, [x15]
	adrp	x0, .L.str.6
	add	x0, x0, :lo12:.L.str.6
	mov	x2, x9
	mov	x3, x11
	mov	x4, x13
	mov	x5, x13
	mov	x7, x15
	str	x10, [sp, #56]                  // 8-byte Folded Spill
	str	x12, [sp, #48]                  // 8-byte Folded Spill
	str	x14, [sp, #40]                  // 8-byte Folded Spill
	str	x16, [sp, #32]                  // 8-byte Folded Spill
	str	x17, [sp, #24]                  // 8-byte Folded Spill
	str	x18, [sp, #16]                  // 8-byte Folded Spill
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	bl	printf
	mov	w1, wzr
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	str	w1, [x8]
	b	.LBB1_1
.LBB1_1:                                // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	ldr	w9, [x8]
	subs	w9, w9, #3                      // =3
	b.gt	.LBB1_4
	b	.LBB1_2
.LBB1_2:                                //   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	ldrsw	x9, [x8]
	mov	w10, w9
	subs	w10, w10, #7                    // =7
	ldr	x11, [sp, #48]                  // 8-byte Folded Reload
	str	w10, [x11, x9, lsl #2]
	b	.LBB1_3
.LBB1_3:                                //   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	b	.LBB1_1
.LBB1_4:
	mov	w8, wzr
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
	str	w8, [x9]
	b	.LBB1_5
.LBB1_5:                                // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	ldr	w9, [x8]
	subs	w9, w9, #11                     // =11
	b.gt	.LBB1_8
	b	.LBB1_6
.LBB1_6:                                //   in Loop: Header=BB1_5 Depth=1
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	ldrsw	x9, [x8]
	mov	w10, w9
	add	w10, w10, #204                  // =204
	ldr	x11, [sp, #40]                  // 8-byte Folded Reload
	str	w10, [x11, x9, lsl #2]
	b	.LBB1_7
.LBB1_7:                                //   in Loop: Header=BB1_5 Depth=1
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	b	.LBB1_5
.LBB1_8:
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	ldrsw	x9, [x8]
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	ldr	w1, [x10, x9, lsl #2]
	adrp	x0, .L.str.7
	add	x0, x0, :lo12:.L.str.7
	bl	printf
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	ldr	w1, [x8]
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	str	w0, [sp, #4]                    // 4-byte Folded Spill
	mov	x0, x9
	bl	_Z5test2Pii
	ldr	x8, [sp, #32]                   // 8-byte Folded Reload
	ldr	w1, [x8]
	adrp	x0, .L.str.8
	add	x0, x0, :lo12:.L.str.8
	bl	printf
	st2g	sp, [sp, #64]
	st2g	sp, [sp, #96]
	st2g	sp, [sp, #128]
	st2g	sp, [sp, #160]
	add	sp, sp, #192                    // =192
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end1:
	.size	_Z4testi, .Lfunc_end1-_Z4testi
	.cfi_endproc
                                        // -- End function
	.globl	_Z15prep_main_stackiPPc         // -- Begin function _Z15prep_main_stackiPPc
	.p2align	2
	.type	_Z15prep_main_stackiPPc,@function
_Z15prep_main_stackiPPc:                // @_Z15prep_main_stackiPPc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x8, xzr
	irg	x8, sp, x8
	addg	x9, x8, #48, #0
	stg	x9, [x9]
	addg	x8, x8, #32, #1
	stg	x8, [x8]
	str	w0, [x9]
	str	x1, [x8]
	adrp	x0, .L.str.9
	add	x0, x0, :lo12:.L.str.9
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	bl	printf
	mov	w10, #65523
	movk	w10, #7, lsl #16
	mov	w1, w10
	mov	w10, #55
	mov	w2, wzr
	str	w0, [sp, #20]                   // 4-byte Folded Spill
	mov	w0, w10
	str	w2, [sp, #16]                   // 4-byte Folded Spill
	ldr	w3, [sp, #16]                   // 4-byte Folded Reload
	ldr	w4, [sp, #16]                   // 4-byte Folded Reload
	bl	prctl
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	and	x9, x9, #0xfffffffffffff000
	mov	w10, #4096
	mov	w1, w10
	mov	w2, #35
	movk	w2, #256, lsl #16
	str	w0, [sp, #12]                   // 4-byte Folded Spill
	mov	x0, x9
	bl	mprotect
	st2g	sp, [sp, #32]
	add	sp, sp, #64                     // =64
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end2:
	.size	_Z15prep_main_stackiPPc, .Lfunc_end2-_Z15prep_main_stackiPPc
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	2
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208                    // =208
	stp	x29, x30, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #192                   // =192
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x8, xzr
	irg	x8, sp, x8
	addg	x9, x8, #176, #0
	stg	x9, [x9]
	mov	x10, x9
	addg	x11, x8, #160, #1
	stg	x11, [x11]
	addg	x12, x8, #144, #2
	stg	x12, [x12]
	mov	x13, x12
	addg	x14, x8, #128, #3
	stg	x14, [x14]
	mov	x15, x14
	addg	x16, x8, #80, #4
	stg	x16, [x16, #32]
	st2g	x16, [x16]
	addg	x8, x8, #64, #5
	stg	x8, [x8]
	mov	w17, wzr
	str	w17, [x9]
	str	w0, [x11]
	str	x1, [x12]
	adrp	x0, .L.str.10
	add	x0, x0, :lo12:.L.str.10
	str	x10, [sp, #56]                  // 8-byte Folded Spill
	str	x13, [sp, #48]                  // 8-byte Folded Spill
	str	x14, [sp, #40]                  // 8-byte Folded Spill
	str	x15, [sp, #32]                  // 8-byte Folded Spill
	str	x16, [sp, #24]                  // 8-byte Folded Spill
	str	x8, [sp, #16]                   // 8-byte Folded Spill
	bl	printf
	mov	w17, #26
	mov	w1, w17
	str	w0, [sp, #12]                   // 4-byte Folded Spill
	mov	x0, x1
	bl	getauxval
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	str	x0, [x8]
	ldrb	w17, [x8, #2]
	tbnz	w17, #2, .LBB3_2
	b	.LBB3_1
.LBB3_1:
	mov	w8, #1
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	str	w8, [x9]
	b	.LBB3_5
.LBB3_2:
	mov	w8, #65527
	movk	w8, #7, lsl #16
	mov	w1, w8
	mov	w0, #55
	mov	w2, wzr
	str	w2, [sp, #8]                    // 4-byte Folded Spill
	ldr	w3, [sp, #8]                    // 4-byte Folded Reload
	ldr	w4, [sp, #8]                    // 4-byte Folded Reload
	bl	prctl
	cbz	w0, .LBB3_4
	b	.LBB3_3
.LBB3_3:
	adrp	x0, .L.str.11
	add	x0, x0, :lo12:.L.str.11
	bl	perror
	mov	w8, #1
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	str	w8, [x9]
	b	.LBB3_5
.LBB3_4:
	ldr	x8, [sp, #48]                   // 8-byte Folded Reload
	ldr	x9, [x8]
	ldr	x0, [x9, #8]
	bl	atoi
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	str	w0, [x8]
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x1, [x9]
	ldr	w5, [x8]
	adrp	x0, .L.str.12
	add	x0, x0, :lo12:.L.str.12
	mov	x2, x9
	ldr	x3, [sp, #24]                   // 8-byte Folded Reload
	ldr	x4, [sp, #24]                   // 8-byte Folded Reload
	mov	x6, x8
	bl	printf
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	ldrsw	x9, [x8]
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	add	x9, x10, x9, lsl #2
	mov	x11, #-72057594037927936
	ldr	w1, [x9, x11]
	adrp	x9, .L.str.13
	add	x9, x9, :lo12:.L.str.13
	str	w0, [sp, #4]                    // 4-byte Folded Spill
	mov	x0, x9
	bl	printf
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	ldr	w12, [x8]
	str	w0, [sp]                        // 4-byte Folded Spill
	mov	w0, w12
	bl	_Z4testi
	mov	w12, wzr
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	str	w12, [x8]
	b	.LBB3_5
.LBB3_5:
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	ldr	w0, [x8]
	st2g	sp, [sp, #64]
	st2g	sp, [sp, #96]
	st2g	sp, [sp, #128]
	st2g	sp, [sp, #160]
	add	sp, sp, #192                    // =192
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end3:
	.size	main, .Lfunc_end3-main
	.cfi_endproc
                                        // -- End function
	.type	.L.str,@object                  // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"IN_test2_func: Input ta: %p value: %i, stored at %p | ind: %i, addr: %p \n"
	.size	.L.str, 74

	.type	.L.str.1,@object                // @.str.1
.L.str.1:
	.asciz	"Modified ta's tag, new ptr: %p \n"
	.size	.L.str.1, 33

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	"Accessing ta[2] (extra space in ta's granule) %i \n"
	.size	.L.str.2, 51

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"Accessing ta_prev_tag[2] (extra space in ta's granule) %i \n"
	.size	.L.str.3, 60

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"Accessing ta_prev_tag[ind]: (overflowing into arr2, with modified tag): %p %i \n"
	.size	.L.str.4, 80

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.asciz	"Accessing ta[ind]: (overflowing into arr2, with wrong tag): %p %i \n"
	.size	.L.str.5, 68

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"IN_test_func: Input ind: %i stored at: %p | arr1 addr: %p | arr2 addr: %p %p | int a: %i addr: %p \n"
	.size	.L.str.6, 100

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"Accessing arr2[ind] (intra-stack overflow into arr1): %i \n"
	.size	.L.str.7, 59

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"Finished test2, a: %i \n"
	.size	.L.str.8, 24

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"####### EXECUTING prep_main_stack function!!!! \n"
	.size	.L.str.9, 49

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"####### EXECUTING main function!! \n"
	.size	.L.str.10, 36

	.type	.L.str.11,@object               // @.str.11
.L.str.11:
	.asciz	"prctl() failed"
	.size	.L.str.11, 15

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"IN_main_func: hwcap2: %lu addr: %p | arr addr: %p %p | ind: %i addr: %p | will access arr[ind now] \n"
	.size	.L.str.12, 101

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"Accessing (arr tag-1)[ind] : %i \n"
	.size	.L.str.13, 34

	.section	.init_array,"aw",@init_array
	.p2align	3
	.xword	_Z15prep_main_stackiPPc
	.ident	"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym _Z5test2Pii
	.addrsig_sym printf
	.addrsig_sym _Z4testi
	.addrsig_sym _Z15prep_main_stackiPPc
	.addrsig_sym prctl
	.addrsig_sym mprotect
	.addrsig_sym getauxval
	.addrsig_sym perror
	.addrsig_sym atoi
