/*
 * To be compiled with -march=armv8.5-a+memtag
 */
#include <errno.h>
#include <stdint.h>
#include <stdio.h>
#include <cstdlib>
#include <unistd.h>
#include <sys/auxv.h>
#include <sys/mman.h>
#include <sys/prctl.h>
#include <fcntl.h>

/*
 * From arch/arm64/include/uapi/asm/hwcap.h
 */
#define HWCAP2_MTE              (1 << 18)

/*
 * From arch/arm64/include/uapi/asm/mman.h
 */
#define PROT_MTE                 0x20

/*
 * From include/uapi/linux/prctl.h
 */
#define PR_SET_TAGGED_ADDR_CTRL 55
#define PR_GET_TAGGED_ADDR_CTRL 56
# define PR_TAGGED_ADDR_ENABLE  (1UL << 0)
# define PR_MTE_TCF_SHIFT       1
# define PR_MTE_TCF_NONE        (0UL << PR_MTE_TCF_SHIFT)
# define PR_MTE_TCF_SYNC        (1UL << PR_MTE_TCF_SHIFT)
# define PR_MTE_TCF_ASYNC       (2UL << PR_MTE_TCF_SHIFT)
# define PR_MTE_TCF_MASK        (3UL << PR_MTE_TCF_SHIFT)
# define PR_MTE_TAG_SHIFT       3
# define PR_MTE_TAG_MASK        (0xffffUL << PR_MTE_TAG_SHIFT)

int main()
{
        unsigned char *a;
        unsigned long page_sz = sysconf(_SC_PAGESIZE);
        unsigned long hwcap2 = getauxval(AT_HWCAP2);

        /* check if MTE is present */
        if (!(hwcap2 & HWCAP2_MTE))
                return EXIT_FAILURE;

        /*
         * Enable the tagged address ABI, synchronous or asynchronous MTE
         * tag check faults (based on per-CPU preference) and allow all
         * non-zero tags in the randomly generated set.
         */
        if (prctl(PR_SET_TAGGED_ADDR_CTRL,
                  PR_TAGGED_ADDR_ENABLE | PR_MTE_TCF_SYNC | PR_MTE_TCF_ASYNC |
                  (0xfffe << PR_MTE_TAG_SHIFT),
                  0, 0, 0)) {
                perror("prctl() failed");
                return EXIT_FAILURE;
        }

        // Test0: [Worked] Usage as suggested by linux https://www.kernel.org/doc/html/latest/arm64/memory-tagging-extension.html 
        // need to explicitly cast since c++ doesn't allow casting void* to unsigned char* [that'd be okay in C]
        // printf("Test0: ");
        // a = static_cast<unsigned char*>(mmap(0, page_sz, PROT_READ | PROT_WRITE | PROT_MTE,
        //          MAP_PRIVATE | MAP_ANONYMOUS, -1, 0));

        // Test1: Worked.
        // printf("Test1: ");
        // a = static_cast<unsigned char*>(mmap(0, page_sz, PROT_READ | PROT_WRITE | PROT_MTE,
        //          MAP_SHARED | MAP_ANONYMOUS, -1, 0));

        // Test2: mmap failed: bad file descriptor.
        // printf("Test2: ");
        // a = static_cast<unsigned char*>(mmap(0, page_sz, PROT_READ | PROT_WRITE | PROT_MTE,
        //          MAP_PRIVATE, -1, 0));

        const char *filepath = "file.txt";
        int fd = open(filepath, O_RDWR);
        if (fd < 0)
            printf("ERROR OPENING FILE!!!! \n");

        // Test2a:
        // printf("Test2a: ");
        // a = static_cast<unsigned char*>(mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_MTE,
        //          MAP_PRIVATE, fd, 0));

        // Test2b:
        // printf("Test2b: ");
        // a = static_cast<unsigned char*>(mmap(NULL, 32, PROT_READ | PROT_WRITE,
        //          MAP_PRIVATE, fd, 0));        

        // Test3:
        // printf("Test3: ");
        // a = static_cast<unsigned char*>(mmap(0, page_sz, PROT_READ | PROT_WRITE | PROT_MTE,
        //          MAP_SHARED, -1, 0));

        // Test4:
        printf("Test4: O_RDWR: ");
        // Opening a file using mmap:
        a = static_cast<unsigned char*>(mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_MTE,
                 MAP_SHARED, fd, 0));

        // Test4a:
        printf("Test4a: ");
        // Opening a file using mmap:
        // a = static_cast<unsigned char*>(mmap(NULL, 32, PROT_READ | PROT_WRITE,
        //          MAP_SHARED, fd, 0));


        if (a == MAP_FAILED) {
                perror("mmap() failed");
                return EXIT_FAILURE;
        }

        printf("YAYY! WORKED: fresh mmap ptr: %p, of sz: %lu \n", a, page_sz);

}